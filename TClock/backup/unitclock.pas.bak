unit UnitClock;

{$mode ObjFPC}{$H+}

interface

uses
	Classes, SysUtils, Linux, UnixType;

type

  TClock = class;
  TClockEvent = class;

  TClock = class(TPersistent)
  	private
    	fRunning: Boolean;
      fInterval: Double;
      fCurrentTime: Double;
      fLastTime: Double;
      fTargetTime: Double;
      fCycleTime: Double;
      fElapsedTime: Double;
      fFramesPerSecond: Double;
      fFrames: Integer;
      fFrameTime: Double;
      fResolution: Int64;
      fHour:
      TP: timespec;

      procedure Init(); register;
      function GetResolution(): Int64; register;
      function GetTime(): Double; register;
      procedure Update(); register;

    public
      property Running: Boolean read fRunning;
      property Interval: Double read fInterval;
      property CurrentTime: Double read fCurrentTime;
      property LastTime: Double read fLastTime;
      property TargetTime: Double read fTargetTime;
      property CycleTime: Double read fCycleTime;
      property ElapsedTime: Double read fElapsedTime;
      property FramesPerSecond: Double read fFramesPerSecond;
      property Resolution: Int64 read fResolution;

      constructor Create(AInterval: Double);

      procedure Start(); register;
      procedure Stop(); register;
      procedure Wait(); register;

  end;


  TClockEvent = class(TPersistent)
    private

    public

  end;

implementation


constructor TClock.Create(AInterval: Double);
	begin
  	Self.fInterval := AInterval;
    Self.GetResolution();
    Self.Init();
  end;

procedure TClock.Init();
	begin
  	Self.fRunning := False;
    Self.fCurrentTime := 0;
    Self.fLastTime := 0;
    Self.fTargetTime := 0;
    Self.fCycleTime := 0;
    Self.fElapsedTime := 0;
    Self.fFramesPerSecond := 0;
    Self.fFrames := 0;
    Self.fFrameTime := 0;
  end;

function TClock.GetResolution(): Int64;
	begin
  	clock_getres(CLOCK_MONOTONIC, @Self.TP);
    Self.fResolution := Self.TP.tv_nsec;
    Result := Self.fResolution;
  end;

function TClock.GetTime(): Double;
	begin
  	clock_gettime(CLOCK_MONOTONIC, @Self.TP);
    Result := Self.TP.tv_sec + (Self.TP.tv_nsec * 1e-9);
	end;

procedure TClock.Update();
	begin
  	Self.fLastTime := Self.fCurrentTime;
    Self.fCurrentTime := Self.GetTime();
    Self.fTargetTime := Self.fCurrentTime + Self.fInterval;
    Self.fCycleTime := Self.fCurrentTime - Self.fLastTime;
    Self.fElapsedTime := Self.fElapsedTime + Self.fCycleTime;

    Self.fFrameTime := Self.fFrameTime + Self.fCycleTime;
    Self.fFrames := Self.fFrames + 1;
    if (Self.fFrameTime >= 1) then begin
    	Self.fFramesPerSecond := Self.fFrames / Self.fFrameTime;
      Self.fFrameTime := 0;
      Self.fFrames := 0;
    end;

  end;

procedure TClock.Start();
	begin
  	Self.Init();
    Self.fCurrentTime := Self.GetTime();
    Self.fLastTime := Self.fCurrentTime;
    Self.fTargetTime := Self.fCurrentTime + Self.fInterval;
    SElf.fRunning := True;
  end;

procedure TClock.Stop();
	begin
  	Self.fRunning := False;
  end;

procedure TClock.Wait();
	begin
  	while (Self.GetTime() < Self.fTargetTime) do begin
    end;

    Self.Update();
  end;

end.

